@page "/"

<PageTitle>NumbGen</PageTitle>

<MudGrid Spacing="1">
    <MudItem xs="12">
        <div class="d-flex justify-center app-title">
            <MudText Typo="Typo.h5" Class="pt-1">random number maker</MudText>
        </div>
    </MudItem>
    <MudItem xs="12">
        <div class="results">
            <h2>Results</h2>

            <ul class="grid-container @itemWidth">
                @foreach (var i in _resultList)
                {
                    <li class="item">@i</li>
                }
            </ul>
        </div>
    </MudItem>
    <MudItem xs="12">
        <MudGrid Spacing="1">
            <MudItem xs="6">
                <MudNumericField Variant="Variant.Outlined" Label="Min" @bind-Value="_minRange" TextChanged="OnRangeChanged" Min="1" Error="_invalidMin" ErrorText="Min must be less than Max" />
            </MudItem>
            <MudItem xs="6">
                <MudNumericField Variant="Variant.Outlined" Label="Max" @bind-Value="_maxRange" TextChanged="OnRangeChanged" Error="_invalidMax" ErrorText="Max must be less than Min" />
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem xs="12">
        <MudGrid Spacing="1">
            <MudItem xs="12">
                <div class="d-flex justify-space-between">
                    <MudCheckBox @bind-Value="_allowRepeats" @bind-Value:after="OnRangeChanged" Label="Allow Repeats" Dense="true" Size="Size.Small" LabelPosition="LabelPosition.End" />                    
                    <MudCheckBox @bind-Value="_sortResults" @bind-Value:after="OnSortChanged" Label="Sort Results" Dense="true" Size="Size.Small" LabelPosition="LabelPosition.End" />
                </div>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem xs="12">
        <MudNumericField @bind-Value="_itemsToGenerate"
                         Variant="Variant.Outlined"
                         TextChanged="OnRangeChanged"
                         Label="Items to Generate"
                         Error="@_invalidRange"
                         ErrorText="Can't generate more unique items than the specified maximum." />
    </MudItem>
    <MudItem xs="12">
        <div class="d-flex justify-space-between">
            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="Reset">Reset</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Shuffle" Disabled="_sortResults || _resultList.Count < 1">Shuffle</MudButton>
            <MudButton OnClick="GenerateNumbers" Variant="Variant.Filled" Color="Color.Primary" Disabled="_invalidRange || _invalidMax || _invalidMin">Generate</MudButton>
        </div>
    </MudItem>
</MudGrid>

@code
{
    List<int> _resultList = [];
    List<int> _sortedResults = [];
    List<int> _unsortedResults = [];
    int _itemsToGenerate = 10;
    int _minRange = 1;
    int _maxRange = 10;
    bool _allowRepeats;
    bool _sortResults;
    bool _invalidRange;
    bool _invalidMin;
    bool _invalidMax;
    string itemWidth = string.Empty;

    void Reset()
    {
        _resultList.Clear();
        _sortedResults.Clear();
        _unsortedResults.Clear();
        _maxRange = _itemsToGenerate = 10;
        _minRange = 1;
        _allowRepeats = false;
        _sortResults = false;
    }

    void GenerateNumbers()
    {
        var rnd = new Random();
        var results = new List<int>(_itemsToGenerate);

        if (_allowRepeats)
        {
            for (var i = 0; i < _itemsToGenerate; i++)
            {
                results.Add(rnd.Next(_minRange, _maxRange + 1));
            }
        }
        else
        {
            var numbers = Enumerable.Range(_minRange, _maxRange - _minRange + 1).ToList();

            while (results.Count < _itemsToGenerate)
            {
                var index = rnd.Next(numbers.Count);
                results.Add(numbers[index]);
                numbers.RemoveAt(index);
            }
        }

        _unsortedResults = new List<int>(results);

        results.Sort();

        _sortedResults = results;

        itemWidth = _maxRange switch
        {
            (< 100) => "narrow-items",
            >= 100 and < 10000 => "less-narrow-items",
            >= 10000 and < 1000000 => "wider-items",
            _ => "widest-items",
        };

        _resultList = _sortResults ? _sortedResults : _unsortedResults;
    }

    void OnSortChanged()
    {
        _resultList = _sortResults ? new List<int>(_sortedResults) : new List<int>(_unsortedResults);
    }

    void OnRangeChanged()
    {
        _invalidMax = _maxRange <= _minRange;
        _invalidMin = _minRange >= _maxRange;
        _invalidRange = _itemsToGenerate > (_maxRange - _minRange + 1) && !_allowRepeats;
    }

    void Shuffle()
    {
        if (!_sortResults)
        {   
            var rnd = new Random();

            for (int i = 0; i < _unsortedResults.Count - 1; ++i)
            {
                int j = rnd.Next(i, _unsortedResults.Count);
                (_unsortedResults[j], _unsortedResults[i]) = (_unsortedResults[i], _unsortedResults[j]);
            }

            _resultList = _unsortedResults.ToList();
        }
    }
}